#!/bin/bash
##################################################################################################
# package-deploy.bsh
#
# Written by Andy Wallace 2017/08/28; last updated 2017/10/04
#
# This script creates a package for pushing to
# the apache server html directory on a linux system with apache. 
#
# This script is designed to be run from the repo app/bin directory. It requires an
# existing deploy directory at the top of the Git repo work area.
#
# After this script executes, the following package is created:
#   /deploy/$ThisRepo-M.m.I.gz
#      Notes:
#         M - Major release increment/ID
#         m - Minor release increment/ID
#         I - GitHub issue number (0 indicates production release)
#
#   This package is designed to create and populate the /var/www/html directory
#   on the linux apache server. There are README.txt files located in various [repo]
#   directories that identify how this repository is used to maintain the CM Plan Website.
#
#   It also provides the vagrantfile and bootstrap.sh files
#   in the [repo]/deploy directory for creating the VM system.
#
#   The basis directory in app/bin is a template for an initial html5 website.
#   It is also deployed for development purposes using vagrant.
#
#   Deployment procedure using Vagrant:
#
#    1. Run this script to prepare deployment package in [repo]/app/bin directory.
#         NOTE: The [repo]/deploy directory is where vagrantfile is run from.
#    2. Run "vagrant up" to create website on VM guest system.
#         NOTES:
#
#            1. The bootstrap.sh called by vagrant completes the VM install of this website.
#            2. See contents of [repo]/deploy/README.txt for more details.
#            3. If you have multiple gz files from step 1 runs, you can Untar any deployment
#               package prepared by this script to look at different deployment releases.
#               Execute below in [repo]/deploy directory:
#                 $ tar xfz $ThisRepo-$Major.$Minor.$Issue.gz
#                 $ vagrant provision
#            4. Note the Script configuration variables section. The subDir array is for
#               various website pages.
#
#  Dependencies:
#
#     This script requires a repo work area /deploy directory with full capability to
#     create and remove files and directories in.
# 
##################################################################################################

################################################################################
# Script configuration variables
################################################################################
TargetTarDir="server"            # from script run directory
basisDir="../basis"              # from $TargetTarDir
vagrantDir="../vagrant"          # from $TargetTarDir
DeployDir="../../../deploy"      # from $TargetTarDir
subDir[0]="plan"                 # in $TargetTarDir
subDir[1]="plan-template"        # in $TargetTarDir
subDir[2]="overview"             # in $TargetTarDir
subDir[3]="about"                # in $TargetTarDir
subDir[4]="learn"                # in $TargetTarDir
noOfDirs=5                       # Number of subDir values
ThisScript="package-deploy.bsh"
ThisRepo="CM-Plan-Site"

################################################################################
# Process script arguments
################################################################################
if [ "$#" -eq "0" ]; then echo ""
      echo "Invalid argument set. For help execute " $ThisScript " -h"
      echo ""
      echo "ERROR - No argument supplied."
      exit 1
fi

if [ "$#" -ge "1" ]; then
   echo "`date +%c` Validate arguments ..."
   elif [ "$#" -gt "3" ]; then
      echo ""
      echo "Invalid argument set. For help execute " $ThisScript " -h"
      echo ""
      echo "ERROR - Too many arguments supplied."
      exit 1
   elif [ "$#" -lt "3" ]; then
      echo ""
      echo "Invalid argument set. For help execute " $ThisScript " -h"
      echo ""
      echo "ERROR - Invalid number of arguments supplied."
      exit 1
fi

if [ "$1" == "-h" ]; then
   echo ""
   echo "$ThisScript -h|[ Major Minor churn ]" 
   echo ""
   echo "   -h          -> Prints this help text."
   echo ""
   echo "   Major -> Release Major number for this $ThisRepo repo deployment."
   echo ""
   echo "   Minor -> Release Minor number for this $ThisRepo repo deployment."
   echo ""
   echo "   Issue -> GitHub issue number for this $ThisRepo repo deployment."
   echo ""
   exit 1
else
   Major="$1"
   Minor="$2"
   Issue="$3"
fi

# Test -echo arguments
#echo "Major is " $Major
#echo "Minor is " $Minor
#echo "Issue # is " $Issue

################################################################################
# Create deploy package
################################################################################
# Tar work area
cd $TargetTarDir
cp $vagrantDir/bootstrap.sh .
cp $vagrantDir/vagrantfile .
cd html
cp -R ../$basisDir/* .
DirCnt=0;
while [[ "$DirCnt" < "$noOfDirs" ]]; do
  for dirname in "${subDir[$DirCnt]}"
  do
  mkdir $dirname
  cp ../../$dirname/index.html ./$dirname/index.html
  if [[ "$dirname" == "learn" ]]; then
     cp ../../$dirname/style.css ./$dirname/style.css
  fi
  if [[ "$DirCnt" < "$noOfDirs" ]]; then
	  DirCnt=$[$DirCnt +1]
	  break
  fi
  if [[ "$DirCnt" = "$noOfDirs" ]]; then
	  echo "#####################################################"
	  echo "ERROR - Number of directories $noOfDirs is incorrect"
	  echo "#####################################################"
	  exit
  fi
  done
done
cd ../
tar cfz $ThisRepo-$Major.$Minor.$Issue.gz *
# clean up $TargetTarDir
rm bootstrap.sh
rm vagrantfile
rm -r html/*
# Prepare deployment for install
mv $ThisRepo-$Major.$Minor.$Issue.gz $DeployDir/ 
cd $DeployDir
rm bootstrap.sh
rm vagrantfile
tar xfz $ThisRepo-$Major.$Minor.$Issue.gz
# testing to here.

echo "`date +%c` Package Created at deploy/$ThisRepo-$Major.$Minor.$Issue.gz"


